const request = require('supertest');
const { Category, Product, User } = require('../models');
const server = request('http://localhost:3000');

let cookie;
let user;

const getUser = async () => {
    if (user) return user;

    try {
      user = await User.create({
        firstname: 'John',
        lastname: 'Doe',
        email: 'zorglux+categorie@zorglux.com',
        password: 'Password123254369!',
        role: 'admin',
        active: true
      });
    } catch (e) {
      user = await User.findOne({
        where: {
          firstname: 'John',
          lastname: 'Doe',
          email: 'zorglux+categorie@zorglux.com',
          role: 'admin',
          active: true
        }
      });
    }
  
    return user;
};

const getCookie = async () => {
  if(!user) await getUser();
  if (cookie) return cookie;

  const loginResponse = await server
    .post('/login')
    .send({
      email: user.email,
      password: 'Password123254369!',
    });
  cookie = loginResponse.headers['set-cookie'];
  return cookie;

}

beforeAll(async () => {
    cookie = await getCookie();
});

describe('Category routes', () => {

  it('should create a new category', async () => {
    const newCategory = {
      name: 'Electronics',
      slug: 'electronics',
      description: 'All kinds of electronic items',
    };

    const response = await server
      .post('/categories')
      .send(newCategory)
      .set('Cookie', cookie)
      .expect(201);

    expect(response.body.name).toBe(newCategory.name);
    expect(response.body.description).toBe(newCategory.description);
  });

  it('should get a category with is id', async () => {
    const categoryToGet = await Category.findOne({
      where: {
        name: 'Electronics',
        slug: 'electronics',
        description: 'All kinds of electronic items',
      }
    });

    const response = await server
      .get(`/categories/${categoryToGet.id}`);

    expect(response.body.id).toBe(categoryToGet.id);
  });

  it('should get a category with is slug', async () => {
    const categoryToGet = await Category.findOne({
      where: {
        name: 'Electronics',
        slug: 'electronics',
        description: 'All kinds of electronic items',
      }
    });

    const response = await server
      .get(`/categories/${categoryToGet.slug}`);

    expect(response.body.id).toBe(categoryToGet.id);
  });

  it('should update a category with products', async () => {
    const category = await Category.create({
      name: 'Home Appliances',
      slug: 'homeappliances',
      description: 'Appliances for home use',
    });

    const product1 = await Product.create({
      name: 'Washing Machine',
      reference: 'WM123',
      price: 500,
      active: true,
      description: 'Efficient washing machine',
    });

    const product2 = await Product.create({
      name: 'Refrigerator',
      reference: 'RF456',
      price: 800,
      active: true,
      description: 'Large refrigerator',
    });

    const response = await server
      .patch(`/categories/${category.id}`)
      .set('Cookie', cookie)
      .send({
        name: 'Updated Home Appliances',
        Products: [product1.id, product2.id],
      })
      .expect(200);

    expect(response.body.name).toBe('Updated Home Appliances');
    const updatedCategory = await Category.findByPk(category.id, { include: Product });
    expect(updatedCategory.Products.length).toBe(2);
  });

  it('should delete a category', async () => {
    const category = await Category.create({
      name: 'Temporary Category',
      slug: 'temporarycategory',
      description: 'This category will be deleted',
    });

    await server
      .delete(`/categories/${category.id}`)
      .set('Cookie', cookie)
      .expect(204);

    const deletedCategory = await Category.findByPk(category.id);
    expect(deletedCategory).toBeNull();
  });
});
