const request = require('supertest');
const { User } = require('../models');
const { response } = require('express')
const server = request('http://localhost:3000');

let user;
let cookie;

const getUser = async () => {

  if (user) return user;

  try {
    user = await User.create({
      firstname: 'John',
      lastname: 'Doe',
      email: 'zorglux+usertest@zorglux.com',
      password: 'Password123254369!',
      role: "admin",
      active: true
    });
  } catch (e) {
    user = await User.findOne({
      where: {
        firstname: 'John',
        lastname: 'Doe',
        email: 'zorglux+usertest@zorglux.com',
      }
    })
  }

  return user;

};

const getCookie = async () => {
  if(!user) await getUser();
  if (cookie) return cookie;

  const loginResponse = await server
    .post('/login')
    .send({
      email: user.email,
      password: 'Password123254369!',
    });
  cookie = loginResponse.headers['set-cookie'];
  return cookie;

}

describe('Utilisateurs routes', () => {

  it('should fail to register with wrong email', async () => {
    const cookie = await getCookie();
    await server
      .post('/users')
      .send({
        email: 'toto@toto',
        password: 'Toto123456!',
        firstname: 'toto',
        lastname: 'toto'
      })
      .set('Cookie', cookie).expect(500);
  });

  it('should fail to register with empty first name', async () => {
    const cookie = await getCookie();
    await server
      .post('/users')
      .send({
        email: 'toto@zorglux.com',
        password: 'Toto123456!',
        lastname: 'toto'
      })
      .set('Cookie', cookie)
      .expect(500);
  });

  it('should fail to register with empty last name', async () => {
    const cookie = await getCookie();
    await server
      .post('/users')
      .send({
        email: 'toto@zorglux.com',
        password: 'Toto123456!',
        firstname: 'toto'
      })
      .set('Cookie', cookie)
      .expect(500);
  });

  it('should register with correct details', async () => {
    const cookie = await getCookie();
    await server
      .post('/users')
      .send({
        email: 'toto@zorglux.com',
        password: 'Toto123456!',
        firstname: 'toto',
        lastname: 'toto'
      })
      .set('Cookie', cookie)
      .expect(201);
  });

  it('should fail to register with already registered email', async () => {
    const cookie = await getCookie();

    let newuser;
    try {
      newuser = await User.create({
        email: 'already@zorglux.com',
        password: 'Toto123456!',
        firstname: 'toto',
        lastname: 'toto'
      });
    } catch (e) {
      newuser = await User.findOne({
        where: {
          email: 'already@zorglux.com',
          firstname: 'toto',
          lastname: 'toto'
        }
      });
    }

    await server
      .post('/users')
      .send({
        email: newuser.email,
        password: 'Toto123456!',
        firstname: 'toto',
        lastname: 'toto'
      })
      .set('Cookie', cookie)
      .expect(400);
  });

  it('should fail to register with role admin', async () => {
    await server
      .post('/users')
      .send({
        email: 'admin@zorglux.com',
        password: 'Toto123456!',
        firstname: 'admin',
        lastname: 'admin',
        role: 'admin'
      })
      .expect(401);

  });
    

  it('should login with correct credentials', async () => {

    let newuser;
    try {
      newuser = await User.create({
        email: 'zorglux+usertest2@zorglux.com',
        password: 'Toto123456!',
        firstname: 'toto',
        lastname: 'toto',
        active: true
      });
    } catch (e) {
      newuser = await User.findOne({
        where: {
          email: 'zorglux+usertest2@zorglux.com',
          firstname: 'toto',
          lastname: 'toto',
        }
      });
    }

    await server
      .post('/login')
      .send({
        email: newuser.email,
        password: 'Toto123456!'
      })
      .expect(200);

  });

  it('should fail to login with unregistered email', async () => {
    await server
      .post('/login')
      .send({
        email: 'wrong@zorglux.com',
        password: 'Toto123456!'
      })
      .expect(401);
  });

  it('should get user detail of the loggedUser', async () => {
    const cookie = await getCookie();
    const response = await server
      .get('/users/details')
      .set('Cookie', cookie);

    expect(response.body.email).toBe('zorglux+usertest@zorglux.com');
  });

  it('should get user detail', async () => {
    const cookie = await getCookie();
    const userToGet = await User.findOne({
      where: {
        email: 'zorglux+usertest2@zorglux.com',
      }
    });
    const response = await server
      .get(`/users/${userToGet.id}`)
      .set('Cookie', cookie);

    expect(response.body.id).toBe(userToGet.id);
  });

  it('should register a new user', async () => {
    const userToCreate = {
      firstname: 'toto',
      lastname: 'toto',
      email: 'zorglux+usertest3@zorglux.com',
      password: 'Password123456789!'
    }
    await server
      .post('/users/signup')
      .send(userToCreate)
      .expect(201);
  })

  it('should fail to register an admin user', async () => {
    const userToCreate = {
      firstname: 'toto',
      lastname: 'toto',
      email: 'zorglux+usertest3@zorglux.com',
      password: 'Password123456789!',
      role: 'admin'
    }
    await server
      .post('/users/signup')
      .send(userToCreate)
      .expect(401);
  })

  it('should update the name of the user', async () => {
    const cookie = await getCookie();
    const userToUpdate = await User.findOne({
      where: {
        email: 'zorglux+usertest2@zorglux.com',
      }
    });
    const updatedData = {
      lastname: 'totoo'
    }
    const response = await server
      .patch(`/users/${userToUpdate.id}`)
      .set('Cookie', cookie)
      .send(updatedData);

    expect(response.body.lastname).toBe(updatedData.lastname);
  });


  it('should add a phone number', async () => {
    const cookie = await getCookie();
    const userToUpdate = await User.findOne({
      where: {
        email: 'zorglux+usertest2@zorglux.com',
      }
    });
    const updatedData = {
      password: 'Toto123456!',
      firstname: 'toto',
      lastname: 'toto',
      active: true,
      email: 'zorglux+usertest2@zorglux.com',
      phone: '+33612345677'
    }
    const response = await server
      .put(`/users/${userToUpdate.id}`)
      .send(updatedData)
      .set('Cookie', cookie);

    expect(response.body.phone).toBe(updatedData.phone);
  });


  it('should delete a user', async () => {
    const cookie = await getCookie();
    const userToDelete = await User.findOne({
      where: {
        email: 'zorglux+usertest2@zorglux.com',
      }
    });

    await server
      .delete(`/users/${userToDelete.id}`)
      .set('Cookie', cookie)
      .expect(204);
  });
});
